<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yu Fu]]></title>
  <link href="http://yfu.me/atom.xml" rel="self"/>
  <link href="http://yfu.me/"/>
  <updated>2013-02-17T00:11:51-05:00</updated>
  <id>http://yfu.me/</id>
  <author>
    <name><![CDATA[Yu Fu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Change the default program for viewing PDF files]]></title>
    <link href="http://yfu.me/auctex-evince-file/"/>
    <updated>2013-02-16T23:44:00-05:00</updated>
    <id>http://yfu.me/auctex-evince-file</id>
    <content type="html"><![CDATA[<p>It is quite annoying that, on Mac, AUCTex in Emacs will use &#8220;evince XXX.pdf&#8221; command for viewing PDF files and Mac does not have a built-in evince. Hence, one solution to the problem is installing evince and some people reported that they managed to install it via fink (or maybe MacPorts). My solution is to change the default command for opening PDF files in AUCTex. So, just add the following code to your .emacs file and everything will be OK:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(load "auctex.el" nil t t) 
</span><span class='line'>(load "preview-latex.el" nil t t) 
</span><span class='line'>(add-hook 'LaTeX-mode-hook 
</span><span class='line'>          (lambda () 
</span><span class='line'>            (turn-on-reftex) 
</span><span class='line'>            (setq reftex-plug-into-AUCTeX t))) 
</span><span class='line'>(setq TeX-PDF-mode t) 
</span><span class='line'>(setq TeX-view-program-selection 
</span><span class='line'>      '(((output-dvi style-pstricks) 
</span><span class='line'>         "dvips and PDF Viewer") 
</span><span class='line'>        (output-dvi "PDF Viewer") 
</span><span class='line'>        (output-pdf "PDF Viewer") 
</span><span class='line'>        (output-html "Safari"))) 
</span><span class='line'>(setq TeX-view-program-list 
</span><span class='line'>      '(("dvips and PDF Viewer" "%(o?)dvips %d -o && open %f") 
</span><span class='line'>        ("PDF Viewer" "open %o") 
</span><span class='line'>        ("Safari" "open %o")))</span></code></pre></td></tr></table></div></figure>


<p>So here it is:</p>

<p><img src="http://yfu.me/images/open-pdf.png"></p>

<p>For details, you can look into the actual meaning of these two variables in Emacs by:</p>

<p>M-x TeX-view-program-selection</p>

<p>M-x TeX-view-program-list</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Yanking in Emacs Minibuffer?]]></title>
    <link href="http://yfu.me/yanking-in-emacs-minibuffer/"/>
    <updated>2013-02-04T22:31:00-05:00</updated>
    <id>http://yfu.me/yanking-in-emacs-minibuffer</id>
    <content type="html"><![CDATA[<p>This may seem a silly question but I did encounter some difficulties in yanking (pasting) things in the minibuffer in Emacs. C-y does not work and after googling online, I found that the right way is using M-y instead of C-y. The <a href="http://ignaciopp.wordpress.com/2010/12/02/emacs-how-to-paste-text-in-the-search-minibuffer/">blog</a> here helped me. The author also pointed out that Richard Stallman answered the question in 2005 <a href="http://www.mail-archive.com/emacs-pretest-bug@gnu.org/msg03693.html">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[转载：我最近买钻戒的经验]]></title>
    <link href="http://yfu.me/diamonds/"/>
    <updated>2013-01-12T17:51:00-05:00</updated>
    <id>http://yfu.me/diamonds</id>
    <content type="html"><![CDATA[<p>按照传统(其实是西方的传统)，求婚或订婚时男方要送女方一枚钻戒(称为engagement
ring)，女方是不送男方钻戒的(看来只有男方向女方求婚了)。结婚时双方互赠素圈
戒指(称为wedding bands)，这才是以后生活中经常戴的戒指。wedding bands因为
便宜所以经常戴着也不用怕掉怕被抢，而engagement ring因为很贵所以一般都是在
某些场合才戴上的。</p>

<p>我上个月花了折合840元买了一对白金wedding bands，没有任何样式，就是一对圈
圈。需要说明的是白金不是铂金(platinum)，白金是white gold，还是gold的一种，
不过因为颜色是白的而与黄金(yellow gold)区分开来，价钱上白金和黄金是一样的，
都大大低于铂金的价格。另外需要说明的是要去好的商家买，以后若是圈圈的尺寸
不合适了还可以拿过去改尺寸。</p>

<!-- more -->


<p>买engagement ring花了我很多时间，需要说明的是，如果有条件，一定要买个钻戒
送给女方。如果你仔细看过一颗ideal cut的钻石的话，你一定会为它的brilliance和
fire感到眩晕的，(brilliance指钻石全反射的白光强度，fire指钻石分解反射出七
彩色谱光的强度)。送钻石的原因首先在于它的美丽，其次在于它的longevity，(因
为钻石是世上天然物品中最硬的，不会被别的任何东西伤害，除非另一个钻石)，最
后在于它的价格，(我不清楚真爱是什么，但我认为真爱的份量是可以用一个人的付
出来衡量的，金钱时间生命都是实实在在的付出，甜言蜜语不能算)。</p>

<p>engagement ring由两部分组成，钻石和圈圈(setting)。setting比较好选，我喜欢
传统的Tiffany solitaire setting(蒂芬尼单颗钻石戒圈)，细细的圈圈上一个6爪
(pronge)钻石托(mount)，能很好衬托出女人的手指纤细，又能非常好地欣赏钻石的
美丽。如果钻石比较小(小于40分)，建议选4爪托，否则6个爪会把钻石侧面挡住很
多而难以欣赏。我在网上build自己的engagement ring时，setting很快就定好了，
是一个铂金6爪solitaire setting，300美元，(要是在国内一定会便宜得多)。如果
预算比较紧，可以将铂金换成白金或黄金。然后就是长时间的钻石的比较选择了。</p>

<p>钻石一克拉等于100分，0.25克拉就是25分。钻石鉴定机构只会对25分以上的单颗钻
石出具鉴定证明，也就是说25分以下的钻石是没有评级可言的。有人说钻石在30分
以上才有保值作用，也有人说要在50分以上才有保值意义。我觉得保值不能成为买
engagement ring的动机之一，难道指望将来变买engagement ring来赚钱吗？那把
爱情摆到了何处？所以我认为买钻石只要是25分以上都可以。</p>

<p>买钻石最看重的是什么？前面说过，是因为它的美丽。所以买钻石最重要也是唯一
需要坚持的一点就是它的cut的等级一定得是ideal的，因为cut的等级直接影响了一
颗钻石的brilliance和fire。cut等级由高到低一般是ideal，excellent(或premium)，
very good，good。有的鉴定机构还有比ideal更高级别的signature ideal或者hearts
and arrows(俗称八箭八心)等级，如果有，一定要选择最高等级cut的钻石。</p>

<p>除了cut外，影响brilliance和fire的还有polish和symmetry。polish和symmetry的
等级划分和cut的等级划分一样。不过有的鉴定机构没有ideal这个等级划分，最高
是从excellent评起。同样的道理，polish和symmetry也一定要选择最高等级。</p>

<p>然后需要考虑的是4C中的color，color等级由高到低是DEFGHIJKL&#8230;XYZ。DEF的钻
石都属于无色，它们放在一起普通人是不可能看出区别的，只有专业宝石鉴定师在
使用仪器的情况下能看出一点点不一样。但DEF的钻石和GHI的钻石放在一起对比时，
普通人仔细看的话是可以看出GHI的钻石有点点偏黄。至于J以后的钻石不需要对比
也能观察到颜色发黄。所以考虑自己的预算后，DEF是首选，GH是次选，I级别已经
开始有点泛黄了。H级别是color的底线。</p>

<p>除了color外，还有一个重要的指标fluorescence影响钻石的颜色。这个是指钻石在
强烈紫外线下会发出的蓝光的强度。fluorescence的级别由高到低分别是negligible，
none，inert，faint，blue，strong blue。对于坚持传统的完美主义者而言，是不
能有fluorescence的，也就是说fluorescence是negligible或none级别的。对于某
些喜欢有些不同效果的人而言，strong blue级别的fluorescence会让钻石有时看起
来很酷，(而且strong blue级别的钻石也比negligible或none级别的钻石便宜不少
)。</p>

<p>接下来需要考虑的才是4C中的clarity，clarity的级别从高到低是FL，IF，VVS1，
VVS2，VS1，VS2，SI1，SI2，I1，I2，I3。VVS级别的钻石在30倍放大镜下很难看见
疵点，VS级别的钻石在10倍放大镜下很难看见疵点，SI级别的钻石用肉眼直接看很
难看见疵点，I级别的钻石就没法要了。疵点对钻石的美丽影响效果甚微，所以对clarity的
要求可以不用那么高，从FL到VS级别都可以接受，如果预算实在太低，SI级别也可
以考虑。</p>

<p>最后在平衡了上述要求之后，就应该选择carat尽量大的钻石了。所以一颗钻石的大
小实在不能成为询问钻石好坏的问题。</p>

<p>我本来在当地珠宝店询问，我把我的要求范围写出来然后一家家问过去。有一家店
过了两天打电话说他们从总部(在另一个城市)找到了几颗候选，我看中了一颗ideal
cut，D color，VVS1 clarity，0.25 carat的钻石(polish/symmetry/fluorescence都
不知道，因为证书不在当地店中，他们在电话里又不肯讲)，要价折合7200元。但是
他们的铂金setting实在贵了不少，要价3300元。我想钻石无论如何也得是setting的
3倍以上吧，要不然买钻石干嘛。后来他们说如果用白金setting就不另收费，这倒
是很具有诱惑力。不过出于longevity的考虑，我还是坚持选择铂金setting。</p>

<p>同时我在网上看中了一颗hearts and arrows cut，F color，VS1 clarity，0.38
carat的钻石(polish excellent/symmetry excellent/fluorescence none)，要价
折合8000元。最后组装钻石和戒圈，360元运输费，10%宝石进口税，15%本地消费税，
最后算下来这枚engagement ring花了近14000元。26.5%的税收实在是让人心痛，所
以能在本地买最好在本地买，而且以后的清洗保养改圈尺寸等等服务都很方便。</p>

<p>最后说说三家钻戒组装订购网站BlueNile，Mondera，Diamond。网址分别是
www.bluenile.com
www.mondera.com
www.diamond.com
这三家网站都是美国公司，声誉好，价格便宜，能自己选择diamond和setting进行
组装。其中BlueNile在ideal cut之上有一个signature ideal cut级别，钻石鉴定
编号被用激光刻在钻石的girdle上，让人买个安心，不会有钻石和证书不符的掉包
出现。Mondera在ideal cut之上则有一个hearts and arrows cut级别，随送一个viewer可
以看到钻石内部的八箭八心景象。</p>

<p>让我感到奇怪的是BlueNile的钻石polish和symmetry都有ideal级别，而Mondera和
Diamond的钻石polish和symmetry的最高级别只到excellent。BlueNile的钻石fluorescence还
有negligible级别，而Mondera和Diamond的钻石fluorescence的最高级别只到none。
但是三家网站出具的证书都是来自AGSL和GIA的呀，难道BlueNile的钻石真的比Mondera和
Diamond的要好些？不过BlueNile只对美国销售，而Mondera和Diamond还可以向国外
运货。</p>

<p>另外网上买东西还得注意自己的付款方式，我将信用卡号码告诉Mondera后，货还没
出就钱就被划走了。于是我就打电话过去问怎么回事，他们道歉说应该是货品运出
后才收钱，于是过了一天钱被退回到卡上。等到出货了我见到卡上的钱被划走了，
过了两天我发现卡上的钱再次急剧减少。于是我打电话询问信用卡公司，得知在出
货那天和接下来的一天，我的信用卡被Mondera划了两次。于是我又打电话过去，那
边查询后再次道歉，一天后钱被退回卡上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Emacs Daemon on Boot]]></title>
    <link href="http://yfu.me/running-emacs-daeomon-on-boot/"/>
    <updated>2013-01-12T16:48:00-05:00</updated>
    <id>http://yfu.me/running-emacs-daeomon-on-boot</id>
    <content type="html"><![CDATA[<p>Since I knew that emacs 23.1 introduced a new feature: running emacs like a daemon, I have always wanted to run the daemon on boot so that I can run emacs in terminal quicker. I have tried several methods found online, but it seems that they only care about running it under the condition of booting machine (not loging out and in). Maybe the script itself should be able to determine if emacs daemon is already running.</p>

<p>If, for some reason, like logging out and then logging in, this Apple Script (as a login item) will run again, trying to bring another emacs daemon to working which will cause some error, like the one in the following screenshot:</p>

<p><img src="http://yfu.me/images/posts/emacs-daemon-complaining.jpg"></p>

<!-- more -->


<p>So I tweaked a little and added this apple script to the login items and everything looks super now:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tell application "Terminal"
</span><span class='line'>     try
</span><span class='line'>  -- we look for &lt;= 2 because Emacs --daemon seems to always have an entry in visibile-frame-list even if there isn't
</span><span class='line'>  do shell script "/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -e '(&lt;= 2 (length (visible-frame-list)))'"
</span><span class='line'>     on error
</span><span class='line'>      -- daemon is not running, start the daemon and open a frame     
</span><span class='line'>  do shell script "/Applications/Emacs.app/Contents/MacOS/Emacs --daemon"
</span><span class='line'>     end try
</span><span class='line'>end tell</span></code></pre></td></tr></table></div></figure>


<p>So now, even if I log out and then back in, emacs daemon will no longer complain.</p>

<p>I have also added the following alias in .bash.profile so I can call it with less typing:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">ec</span><span class="o">=</span><span class="s1">&#39;/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -nw -c&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Have fun with Emacs!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IDO-mode in Emacs]]></title>
    <link href="http://yfu.me/ido-mode/"/>
    <updated>2013-01-08T03:03:00-05:00</updated>
    <id>http://yfu.me/ido-mode</id>
    <content type="html"><![CDATA[<p>IDO is short for &#8220;Interactively Do Things&#8221;, which is a nice minor mode helping you find the files/directories you want. I just checked the <a href="http://emacswiki.org/emacs/InteractivelyDoThings">emacswiki</a> and pasted the main key bindings here:</p>

<p>To switch between buffers, press “C-x b”, then:</p>

<ol>
<li>type some characters appearing in the buffer name, RET to visit the buffer in the front the list.</li>
<li>use C-s (next) or C-r (previous) to move through the list.</li>
<li>[Tab] display possible completion in a buffer (or visit the buffer if there is only one possible completion).</li>
<li>use C-f to fall back to find file (without ido-mode) or C-b to fall back to switch to buffer (without ido-mode).</li>
</ol>


<!-- more -->


<p>To find a file, press “C-x C-f”.</p>

<ol>
<li>type some characters appearing in the file name, RET to choose the file or directory in the front of the list.</li>
<li>C-s (next) or C-r (previous) to move through the list.</li>
<li>[Tab] - display possible completion in a buffer (or open the file or go down the directory if there is only one possible completion).</li>
<li>RET - type to go down inside the directory in front of the list.</li>
<li>[backspace] - go up to the parent directory.</li>
<li>// - go to the root directory.</li>
<li>~/ - go to the home directory.</li>
<li>C-f - to go back temporarily to the normal find-file.</li>
<li>C-d - enter Dired for this directory (used to be C-x C-d in older versions)</li>
<li>C-j - create a new file named with the text you entered (note: this is needed if the text you entered matches an existing file, because RET would open the existing one)</li>
</ol>


<p>To restrict the list after a first filtering:</p>

<ol>
<li>type some characters appearing in the buffer/file name(say .cpp)</li>
<li>type C-SPC (C-@)</li>
<li>continue as normal with a list containing only the filtered names</li>
</ol>


<p>Recently visited directories:</p>

<ol>
<li>type M-p and M-n to change to previous/next directories from the history</li>
<li>M-s to search for a file matching your input</li>
<li>M-k to remove the current directory from the history</li>
<li>directories are added to the history by navigating inside them via RET</li>
</ol>


<p>The documentation for these keys is available via</p>

<ol>
<li>M-x describe-function RET ido-find-file RET</li>
<li>C-h f ido-find-file RET</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perldoc Complains about groff]]></title>
    <link href="http://yfu.me/perldoc-old-groff/"/>
    <updated>2013-01-01T20:06:00-05:00</updated>
    <id>http://yfu.me/perldoc-old-groff</id>
    <content type="html"><![CDATA[<p>Everytime I ran perldoc, I got the following error message:</p>

<figure class='code'><figcaption><span>perldoc Complains  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  perl  perldoc -f -X
</span><span class='line'>You have an old groff. Update to version 1.20.1 <span class="k">for </span>good Unicode support.
</span><span class='line'>If you don<span class="s1">&#39;t upgrade, wide characters may come out oddly.</span>
</span><span class='line'>
</span><span class='line'><span class="s1"> at /Users/yfu/perl5/perlbrew/perls/perl-5.16.2/lib/5.16.2/Pod/Perldoc.pm line 1346.</span>
</span><span class='line'><span class="s1"> You have an old groff. Update to version 1.20.1 for good Unicode support.</span>
</span><span class='line'><span class="s1"> If you don&#39;</span>t upgrade, wide characters may come out oddly.
</span><span class='line'>
</span><span class='line'>  at /Users/yfu/perl5/perlbrew/perls/perl-5.16.2/lib/5.16.2/Pod/Perldoc.pm line 1346.
</span></code></pre></td></tr></table></div></figure>


<p>Then I checked the version of groff:</p>

<figure class='code'><figcaption><span>groff version  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  perl  groff -v
</span><span class='line'>GNU groff version 1.19.2
</span><span class='line'>Copyright <span class="o">(</span>C<span class="o">)</span> 2004 Free Software Foundation, Inc.
</span><span class='line'>GNU groff comes with ABSOLUTELY NO WARRANTY.
</span><span class='line'>You may redistribute copies of groff and its subprograms
</span><span class='line'>under the terms of the GNU General Public License.
</span><span class='line'>For more information about these matters, see the file named COPYING.
</span><span class='line'>
</span><span class='line'>called subprograms:
</span><span class='line'>
</span><span class='line'>GNU grops <span class="o">(</span>groff<span class="o">)</span> version 1.19.2
</span><span class='line'>GNU troff <span class="o">(</span>groff<span class="o">)</span> version 1.19.2
</span></code></pre></td></tr></table></div></figure>


<p>Obviously, it is way too old. So I need to install a more recent version of groff. One of easiest ways to installing groff (and many other missing software programs on Mac OS) is having a package manager, for example, <a href="http://mxcl.github.com/homebrew/">homebrew</a>,  <a href="http://www.macports.org/">MacPorts</a> and <a href="http://www.finkproject.org/">Fink</a>. After trying MacPorts and Fink years ago, I realized that these two are a bit too complicated for me (though they seem to have more and newer versions of software). Hence, I am using homebrew as the package manager on my computer. If you haven&#8217;t tried it yet, I encourage you to give it a try! You can find installation details <a href="http://mxcl.github.com/homebrew/">here</a>. Below is how to install newer groff using homebrew:</p>

<!--more-->




<figure class='code'><figcaption><span>How to Install groff using homebrew  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  perl  brew search groff
</span><span class='line'>homebrew/dupes/groff
</span><span class='line'>
</span><span class='line'>➜  ~  brew tap homebrew/dupes
</span><span class='line'>Cloning into <span class="s1">&#39;/usr/local/Library/Taps/homebrew-dupes&#39;</span>...
</span><span class='line'>remote: Counting objects: 660, <span class="k">done</span>.
</span><span class='line'>remote: Compressing objects: 100% <span class="o">(</span>286/286<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>remote: Total 660 <span class="o">(</span>delta 415<span class="o">)</span>, reused 612 <span class="o">(</span>delta 374<span class="o">)</span>
</span><span class='line'>Receiving objects: 100% <span class="o">(</span>660/660<span class="o">)</span>, 97.16 KiB | 157 KiB/s, <span class="k">done</span>.
</span><span class='line'>Resolving deltas: 100% <span class="o">(</span>415/415<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>Tapped 36 formula
</span><span class='line'>
</span><span class='line'>➜  ~  brew install <span class="nv">groff</span>
</span><span class='line'><span class="o">==</span>&gt; Downloading http://ftpmirror.gnu.org/groff/groff-1.21.tar.gz
</span><span class='line'><span class="c">######################################################################## 100.0%</span>
</span><span class='line'><span class="o">==</span>&gt; ./configure --prefix<span class="o">=</span>/usr/local/Cellar/groff/1.21 --without-x
</span><span class='line'><span class="o">==</span>&gt; <span class="nv">make</span>
</span><span class='line'><span class="o">==</span>&gt; make install
</span><span class='line'>/usr/local/Cellar/groff/1.21: 554 files, 20M, built in 81 seconds
</span></code></pre></td></tr></table></div></figure>


<p>Note that the official homebrew does not have a formulea (which contains directions on where to download the source and how to compile) for groff. So I need to &#8220;tap&#8221; to import other formula from other people&#8217;s repositories. In my case, you can find it <a href="http://braumeister.org/repos/Homebrew/homebrew-dupes/formula/groff">here</a>. So after seconds, I have the newest groff installed and now perldoc no longer complains about the the older groff!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[笑话两则]]></title>
    <link href="http://yfu.me/two-jokes/"/>
    <updated>2012-12-21T01:33:00-05:00</updated>
    <id>http://yfu.me/two-jokes</id>
    <content type="html"><![CDATA[<p>今天看到了两则笑话很好笑，来源不详。</p>

<p>（一）</p>

<p>前天在德胜门外，我支好相机坐在阶梯上，等待适合的光线。这时一个乞丐来到我身边乞讨，就给了他一块钱，然后继续调试相机，他可能生意不好，就无聊的看看我在干什么，然后过了一会，他幽幽的说:&#8221;用区域曝光好些”。我问他：“你是摄影师？”他无限悲情的望着天空：“我爷爷是”。</p>

<p>（二）</p>

<p>我是个程序猿，一天我坐在路边一边喝水一边苦苦检查bug。这时一个乞丐在我边上坐下了，开始要饭，我觉得可怜，就给了他1块钱，然后接着调试程序。他可能生意不好，就无聊的看看我在干什么，然后过了一会，他幽幽的说，这里少了个分号。</p>

<p>这两则笑话教育我们，一不要当摄影师，二不要当程序员。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HIDPI Mode]]></title>
    <link href="http://yfu.me/hidpi-mode/"/>
    <updated>2012-12-17T02:17:00-05:00</updated>
    <id>http://yfu.me/hidpi-mode</id>
    <content type="html"><![CDATA[<p>I just managed to enbale HIDPI Mode on my MacBook Pro. Though the built-in display of my MacBook Pro cannot make use of that, the iPad 4 can!</p>

<p>I use AirDisplay to make my iPad the 2nd display.</p>

<p>A snapshot:</p>

<p><img src="http://yfu.me/images/hidpi.png" title="'HIDPI Mode'" ></p>

<p>If you look at it more closely, you can see:</p>

<p><img src="http://yfu.me/images/hidpi_small.png" title="'HIDPI Mode'" ></p>

<p>Isn&#8217;t it gorgeous? :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Image Tag]]></title>
    <link href="http://yfu.me/image-tag/"/>
    <updated>2012-12-14T00:24:00-05:00</updated>
    <id>http://yfu.me/image-tag</id>
    <content type="html"><![CDATA[<p>I really love the simplicity of the Octopress image tag.</p>

<p>Let me give it a try.</p>

<p><img src="http://yfu.me/images/posts/candycane.jpg" title="'A candy cane!'" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeblock]]></title>
    <link href="http://yfu.me/codeblock/"/>
    <updated>2012-12-13T23:44:00-05:00</updated>
    <id>http://yfu.me/codeblock</id>
    <content type="html"><![CDATA[<p>This plugin seems to be very useful for sharing code, so let me test it.</p>

<p>Example 1</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Super awesome code snippet</span></code></pre></td></tr></table></div></figure>


<p>Example 2</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">i</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>Example 3</p>

<figure class='code'><figcaption><span>Time to be Awesome - awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Awesome!&quot;</span> <span class="k">unless</span> <span class="n">lame</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example 4 (Force Highlighting)</p>

<figure class='code'><figcaption><span>Here&#8217;s an example .py file  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一篇文章]]></title>
    <link href="http://yfu.me/my-first-post/"/>
    <updated>2012-12-13T23:20:00-05:00</updated>
    <id>http://yfu.me/my-first-post</id>
    <content type="html"><![CDATA[<p>这是我在新域名yfu.me上搭建的博客，也是我第一次使用github和octopress搭建的博客。</p>

<p>不知道我能不能坚持写下去这个博客，现在开始写会不会太晚？</p>

<p>最近各种reports和presentations，身心俱疲，想休息。在美国的第一个学期就要结束了。</p>

<p>近期在学习R，被各种plot函数折磨。</p>

<p>先写到这儿吧。</p>
]]></content>
  </entry>
  
</feed>
